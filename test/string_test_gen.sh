#!bash

# Copyright © 2022 John, Sing Dao, Siu <john.sd.siu@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

echo '/*
Copyright © 2022 John, Sing Dao, Siu <john.sd.siu@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/'
echo '// Generated by string_test_gen.sh'
echo 'package helper'
echo 'import (
	"fmt"
	"testing"

	"github.com/J-Siu/go-helper"
)
'

VAL=127

for PTR in "" "_Ptr"; do

	PtrStr=""
	if [ "${PTR}" == "_Ptr" ]; then PtrStr="&"; fi

	for NewLineBool in true false; do

		NewLineChar=""
		if [ "${NewLineBool}" == "true" ]; then NewLineChar='\n'; fi

		for FuncName in AnyToJsonMarshalSp AnyToJsonMarshalIndentSp; do
			for ValType in int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64; do
				echo "func Test_${FuncName}_${ValType}${PTR}_NewLine_${NewLineBool}(t *testing.T) {"
				echo "var val ${ValType} = ${VAL}"
				echo 'var msg *string = helper.'${FuncName}'('${PtrChar}'val, '${NewLineBool}')'
				echo 'var wanted string = "'${VAL}${NewLineChar}'"'
				echo 'fmt.Println("val = %d, '${FuncName}'() = " + *msg)'
				echo 'if *msg != wanted {'
				echo 't.Fatalf(`val = %d, '${FuncName}'() = %s, not %s`,val, *msg, wanted)'
				echo '}}'
			done
			for ValType in float32 float64; do
				echo "func Test_${FuncName}_${ValType}${PTR}_NewLine_${NewLineBool}(t *testing.T) {"
				echo "var val ${ValType} = ${VAL}"
				echo 'var msg *string = helper.'${FuncName}'('${PtrChar}'val, '${NewLineBool}')'
				echo 'var wanted string = "'${VAL}${NewLineChar}'"'
				echo 'fmt.Println("val = %d, '${FuncName}'() = " + *msg)'
				echo 'if *msg != wanted {'
				echo 't.Fatalf(`val = %f, '${FuncName}'() = %s, not %s`,val, *msg, wanted)'
				echo '}}'
			done
		done
	done
done

# NIL Pointer test
PTR="_Ptr"
PtrStr="&"
for NewLineBool in true false; do

	NewLineChar=""
	if [ "${NewLineBool}" == "true" ]; then NewLineChar='\n'; fi

	for FuncName in AnyToJsonMarshalSp AnyToJsonMarshalIndentSp; do
		for ValType in int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64; do
			echo "func Test_${FuncName}_NIL_${ValType}${PTR}_NewLine_${NewLineBool}(t *testing.T) {"
			echo "var val *${ValType} = nil"
			echo 'var msg *string = helper.'${FuncName}'('${PtrChar}'val, '${NewLineBool}')'
			echo 'var wanted string = helper.NIL_JSON+"'${NewLineChar}'"'
			echo 'fmt.Println("val = %p, '${FuncName}'() = " + *msg)'
			echo 'if *msg != wanted {'
			echo 't.Fatalf(`val = %p, '${FuncName}'() = %s, not %s`,val, *msg, wanted)'
			echo '}}'
		done
		for ValType in float32 float64; do
			echo "func Test_${FuncName}_NIL_${ValType}${PTR}_NewLine_${NewLineBool}(t *testing.T) {"
			echo "var val *${ValType} = nil"
			echo 'var msg *string = helper.'${FuncName}'('${PtrChar}'val, '${NewLineBool}')'
			echo 'var wanted string = helper.NIL_JSON+"'${NewLineChar}'"'
			echo 'fmt.Println("val = %p, '${FuncName}'() = " + *msg)'
			echo 'if *msg != wanted {'
			echo 't.Fatalf(`val = %p, '${FuncName}'() = %s, not %s`,val, *msg, wanted)'
			echo '}}'
		done
	done
done
